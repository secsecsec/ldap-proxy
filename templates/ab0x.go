// generaTed by fileb0x at "2017-05-05 01:23:55.798484767 +0200 CEST" from config file "ab0x.yaml"

package templates

import (
	"bytes"
	"compress/gzip"
	"io"
	"log"
	"net/http"
	"os"

	"golang.org/x/net/context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileIndexHTML is "./index.html"
var FileIndexHTML = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xd0\x31\x4f\xc5\x20\x10\x07\xf0\xbd\x9f\xe2\xbc\xdd\x77\x79\x3b\x25\x31\x3e\x37\x13\x3b\xb8\x38\x22\xd0\x70\x8a\x85\x70\xa4\xb1\xdf\xde\x50\xea\xf2\x86\x4e\x1c\xe1\xfe\xff\xfc\x82\x7a\xb8\xbd\x3d\xbf\x7f\x4c\x2f\x10\xea\x4f\xd4\xc3\xa0\xfa\x09\xa0\x82\x37\xae\x0d\x00\x2a\xf2\xf2\x0d\xc5\xc7\x11\xd9\xa6\x05\x21\x14\x3f\x8f\x48\xd1\x99\xfc\x98\x4b\xfa\xdd\xc8\x88\xf8\x2a\x34\x9b\xb5\x6d\x5c\xd8\x26\xd4\xc3\x7d\x58\xea\x16\xbd\x04\xef\xeb\x49\xc5\x7e\xb9\x58\x11\x04\xda\x1d\xd4\x21\x6d\xfc\x4c\x6e\x3b\x48\x8e\x57\x60\x37\xa2\xc9\x39\xb2\x35\x95\xd3\x82\xfd\xa9\xd1\xaf\xfa\xf5\xf6\x34\xc1\xd4\xba\x14\x85\xeb\x11\x22\xc7\xeb\x3f\x4b\x6c\xe1\x5c\x41\x8a\x3d\x61\x7c\x09\x6a\x45\x7d\xb5\x63\x3a\x41\x51\xff\xa6\xbf\x00\x00\x00\xff\xff\x22\x5f\x8a\xeb\x3f\x01\x00\x00")

func init() {
	if CTX.Err() != nil {
		log.Fatal(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileIndexHTML)
	r, err = gzip.NewReader(rb)
	if err != nil {
		log.Fatal(err)
	}

	err = r.Close()
	if err != nil {
		log.Fatal(err)
	}

	f, err = FS.OpenFile(CTX, "./index.html", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		log.Fatal(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		log.Fatal(err)
	}

	err = f.Close()
	if err != nil {
		log.Fatal(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}
}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// FileNames is a list of files included in this filebox
var FileNames = []string{
	"./index.html",
}
